{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"hatch-semver","text":"<p>A plugin for hatch to support semantic versioning. Hatch-semver relies on python-semver for all the versioning logic.</p>"},{"location":"#setup","title":"Setup","text":"<p>Introduce hatch-semver as a build-dependency to your project (in your <code>pyproject.toml</code>):</p> <pre><code>[build-system]\nrequires = [\n    \"hatchling\",\n    \"hatch-semver\",\n]\nbuild-backend = \"hatchling.build\"\n</code></pre> <p>Further down in <code>pyproject.toml</code>,  where you set up the hatch version command,  set version scheme to <code>semver</code>: <pre><code>[tool.hatch.version]\npath = \"src/&lt;your_project&gt;/__about__.py\"\nvalidate-bump = True\nscheme = \"semver\"\n</code></pre></p> <p>Note</p> <p>Hatch-semver plugin will only work with project versions which can be readily parsed by python-semver. Therefore, if you are introducing hatch-semver into an existing project, you must make sure that the project's current version is a valid semantic version. You can test that here.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Many of hatch's standard versioning commands also work for hatch-semver to bump your project's version in a semver-compliant way.  Such command is written as a single string of comma-separated bump instructions as a positional argument of the <code>hatch version</code> subcommand, i.e <code>hatch version &lt;COMMAND&gt;</code>.</p> <p>Starting with <code>0.1.0</code> as the original version, here is a series of example commands which illustrate some common ways how to bump the version:</p> Old Version Command New Version <code>0.1.0</code> <code>patch</code> <code>0.1.1</code> <code>0.1.1</code> <code>minor,patch,patch</code> <code>0.2.2</code> <code>0.2.2</code> <code>minor</code> <code>0.3.0</code> <code>0.3.0</code> <code>rc</code> <code>0.3.1-rc.1</code> <code>0.3.1-rc.1</code> <code>rc</code> <code>0.3.1-rc.2</code> <code>0.3.1-rc.2</code> <code>release</code> <code>0.3.1</code> <code>0.3.1</code> <code>0.9.5</code> <code>0.9.5</code> <code>0.9.5</code> <code>major,rc</code> <code>1.0.0-rc.1</code> <code>1.0.0-rc.1</code> <code>release</code> <code>1.0.0</code> <p>See the command reference for all the commands in full detail. If you are familiar with hatch's standard versioning scheme, perhaps a comparison of the standard scheme and hatch-semver will be of interest.</p>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#202-2024-02-17","title":"2.0.2 - 2024-02-17","text":""},{"location":"CHANGELOG/#bugfixes","title":"Bugfixes","text":"<ul> <li>use hatch-semver 2.0.1 as build dependency #90</li> </ul>"},{"location":"CHANGELOG/#201-2024-02-17","title":"2.0.1 - 2024-02-17","text":""},{"location":"CHANGELOG/#bugfixes_1","title":"Bugfixes","text":"<ul> <li>release a version not dependent on itself #90</li> </ul>"},{"location":"CHANGELOG/#development-details","title":"Development Details","text":"<ul> <li>use unix newlines #91</li> </ul>"},{"location":"CHANGELOG/#200-2024-02-03","title":"2.0.0 - 2024-02-03","text":""},{"location":"CHANGELOG/#documentation","title":"Documentation","text":"<ul> <li>fix links in the changelog #76</li> <li>fix links in readme #77</li> <li>use normal hatchling in readme #86</li> <li>doc: link to a python-semver bug #78</li> </ul>"},{"location":"CHANGELOG/#new-features","title":"New Features","text":"<ul> <li>use python-semver 3 #75</li> </ul>"},{"location":"CHANGELOG/#development-details_1","title":"Development Details","text":"<ul> <li>use normal hatchling in <code>pyproject.toml</code> #79</li> </ul>"},{"location":"CHANGELOG/#101-2022-11-17","title":"1.0.1 - 2022-11-17","text":""},{"location":"CHANGELOG/#documentation_1","title":"Documentation","text":"<ul> <li>Fixed typos and errors in the documentation #59</li> <li>Set correct project homepage in <code>pyproject.toml</code>. It should be now linked from PyPI. #64</li> </ul>"},{"location":"CHANGELOG/#development-details_2","title":"Development Details","text":"<ul> <li>Set current date in <code>__about__.py</code> #61</li> <li>Wrote a test for current date in <code>__about__.py</code> #62</li> <li>Wrote a test for current version in the changelog #63</li> </ul>"},{"location":"CHANGELOG/#100-2022-11-17","title":"1.0.0 - 2022-11-17","text":""},{"location":"CHANGELOG/#new-features_1","title":"New Features","text":"<ul> <li>Released v1.0.0 #57</li> </ul>"},{"location":"CHANGELOG/#100-rc4-2022-11-16","title":"1.0.0-rc.4 - 2022-11-16","text":""},{"location":"CHANGELOG/#documentation_2","title":"Documentation","text":"<ul> <li>Renamed User Documentation Workflow to Master PR Closed #53</li> </ul>"},{"location":"CHANGELOG/#development-details_3","title":"Development Details","text":"<ul> <li>Test stage is set up #51</li> </ul>"},{"location":"CHANGELOG/#100-rc3-2022-11-16","title":"1.0.0-rc.3 - 2022-11-16","text":""},{"location":"CHANGELOG/#documentation_3","title":"Documentation","text":"<ul> <li>Using admonitions #44</li> <li>Using a note admonition in <code>index.md</code> #49</li> </ul>"},{"location":"CHANGELOG/#development-details_4","title":"Development Details","text":"<ul> <li>Using actions/checkout@v3 in the CI #46</li> <li>Using setup-python@v4 in the CI #47</li> </ul>"},{"location":"CHANGELOG/#100-rc2-2022-11-16","title":"1.0.0-rc.2 - 2022-11-16","text":""},{"location":"CHANGELOG/#documentation_4","title":"Documentation","text":"<ul> <li>Using admonitions #44</li> </ul>"},{"location":"CHANGELOG/#development-details_5","title":"Development Details","text":"<ul> <li>Using actions/checkout@v3 in the CI #46</li> <li>Using setup-python@v4 in the CI #47</li> </ul>"},{"location":"CHANGELOG/#100-rc1-2022-11-16","title":"1.0.0-rc.1 - 2022-11-16","text":""},{"location":"CHANGELOG/#documentation_5","title":"Documentation","text":"<ul> <li>Using PowerShell instead of cmd commands in pyproject #35</li> <li>Added githooks to the repo. Set your core.hookspath to <code>.githooks</code> #36</li> <li>Updated links to published documentation in <code>README.md</code> #43</li> </ul>"},{"location":"CHANGELOG/#development-details_6","title":"Development Details","text":"<ul> <li>Deleted unnecessary copy of the documentation #41</li> <li>Better documentation pipeline #42</li> </ul>"},{"location":"CHANGELOG/#024-2022-11-15","title":"0.2.4 - 2022-11-15","text":""},{"location":"CHANGELOG/#development-details_7","title":"Development Details","text":"<ul> <li>Using PowerShell instead of cmd commands in pyproject #35</li> <li>Added githooks to the repo. Set your core.hookspath to <code>.githooks</code> #36</li> </ul>"},{"location":"CHANGELOG/#024-rc1-2022-11-15","title":"0.2.4-rc.1 - 2022-11-15","text":""},{"location":"CHANGELOG/#development-details_8","title":"Development Details","text":"<ul> <li>Use hatch-semver for versioning #33</li> </ul>"},{"location":"CHANGELOG/#023-2022-11-15","title":"0.2.3 - 2022-11-15","text":""},{"location":"CHANGELOG/#documentation_6","title":"Documentation","text":"<ul> <li>Separated home.md from README.md #31</li> </ul>"},{"location":"CHANGELOG/#022-2022-11-15","title":"0.2.2 - 2022-11-15","text":""},{"location":"CHANGELOG/#documentation_7","title":"Documentation","text":"<ul> <li>Removed api-docs #29</li> </ul>"},{"location":"CHANGELOG/#021-2022-11-15","title":"0.2.1 - 2022-11-15","text":""},{"location":"CHANGELOG/#documentation_8","title":"Documentation","text":"<ul> <li>Moved user-docs to docs #27</li> </ul>"},{"location":"CHANGELOG/#020-2022-11-15","title":"0.2.0 - 2022-11-15","text":""},{"location":"CHANGELOG/#documentation_9","title":"Documentation","text":"<ul> <li>Wrote user and api documentation #25</li> </ul>"},{"location":"CHANGELOG/#010-2022-11-13","title":"0.1.0 - 2022-11-13","text":""},{"location":"CHANGELOG/#new-features_2","title":"New Features","text":"<ul> <li>Added inline options for prerelease and build tokens #23</li> </ul>"},{"location":"CHANGELOG/#bugfixes_2","title":"Bugfixes","text":"<ul> <li>Fixed undefined ValeError #16</li> <li>Can bump prereleases now #17</li> <li>Can bump builds now #18</li> <li>Can update version to release #22</li> </ul>"},{"location":"CHANGELOG/#development-details_9","title":"Development Details","text":"<ul> <li>Created tests #19</li> </ul>"},{"location":"CHANGELOG/#008-2022-11-10","title":"0.0.8 - 2022-11-10","text":""},{"location":"CHANGELOG/#bugfixes_3","title":"Bugfixes","text":"<ul> <li>Fixed another ValueError when bumping major version #14</li> </ul>"},{"location":"CHANGELOG/#007-2022-11-10","title":"0.0.7 - 2022-11-10","text":""},{"location":"CHANGELOG/#bugfixes_4","title":"Bugfixes","text":"<ul> <li>Fixed NameError when bumping version #12</li> </ul>"},{"location":"CHANGELOG/#006-2022-11-10","title":"0.0.6 - 2022-11-10","text":""},{"location":"CHANGELOG/#bugfixes_5","title":"Bugfixes","text":"<ul> <li>Major version should be bumpable now #10</li> </ul>"},{"location":"CHANGELOG/#005-2022-11-10","title":"0.0.5 - 2022-11-10","text":"<p>No significant changes.</p>"},{"location":"CHANGELOG/#004-2022-11-10","title":"0.0.4 - 2022-11-10","text":""},{"location":"CHANGELOG/#development-details_10","title":"Development Details","text":"<ul> <li>Plugin structure is ready, should know how to bump major, minor, patch #2</li> </ul>"},{"location":"CHANGELOG/#documentation_10","title":"Documentation","text":"<ul> <li>Better readme, but not final #8</li> </ul>"},{"location":"CHANGELOG/#003-2022-11-10","title":"0.0.3 - 2022-11-10","text":""},{"location":"CHANGELOG/#bugfixes_6","title":"Bugfixes","text":"<ul> <li>Renamed module to hatch_semver #6</li> </ul>"},{"location":"CHANGELOG/#002-2022-11-10","title":"0.0.2 - 2022-11-10","text":""},{"location":"CHANGELOG/#development-details_11","title":"Development Details","text":"<ul> <li>Prepared project #1</li> </ul>"},{"location":"CHANGELOG/#bugfixes_7","title":"Bugfixes","text":"<ul> <li>Fixed plugin hook path #4</li> </ul>"},{"location":"user_guide/1-commands/","title":"Commands","text":"<p>A hatch-semver command is written as a single string of comma-separated bump instructions as the single positional argument of the <code>hatch version</code> subcommand, i.e <code>hatch version &lt;COMMAND&gt;</code>.</p>"},{"location":"user_guide/1-commands/#no-command-at-all","title":"No Command At All","text":"<p>If no command is given, <code>hatch version</code> will simply return the current version of the project.</p>"},{"location":"user_guide/1-commands/#specific-version","title":"Specific Version","text":"<p>You can set a specific version directly, as long as it is a semantic version. If bump validation is used, the resulting version must also be higher, or\u2014if only the build identifier changes\u2014at least equal in precedence.</p> Old Version Command validate-bump New Version <code>2.3.4</code> <code>13.5.26</code> True <code>13.5.26</code> <code>2.3.4</code> <code>2.3.3</code> True ValidationError <code>2.3.4</code> <code>2.3.3</code> False <code>2.3.3</code> <code>2.3.4</code> <code>2.3.4-alpha</code> True ValidationError <code>2.3.4</code> <code>2.3.4-alpha</code> False <code>2.3.4-alpha</code> <code>2.3.4-alpha</code> <code>2.3.4</code> True <code>2.3.4</code> <code>3.0.0-beta.2</code> <code>3.0.0-almost-done.3</code> True ValidationError <code>3.0.0-beta.2</code> <code>3.0.0-rc.1</code> True <code>3.0.0-rc.1</code> <code>4.3.2-rc.2+zoom</code> <code>4.3.2-rc.2+dev</code> True <code>4.3.2-rc.2+dev</code> <p>Keep in mind that all pre-releases are ranked by their ASCII sort order and all of them are lower in precedence than the associated normal version, hence the validation errors. Build versions have all the same precedence, hence no validation error.</p>"},{"location":"user_guide/1-commands/#major-minor-patch","title":"Major, Minor, Patch","text":"Old Version Command New Version <code>0.1.0</code> <code>patch</code><code>fix</code><code>micro</code> <code>0.1.1</code> <code>0.1.1</code> <code>minor</code> <code>0.2.0</code> <code>1.0.0</code> <code>major</code> <code>1.0.0</code> <p>These commands bump the version core. <code>fix</code> and <code>micro</code> are aliases of <code>patch</code>.</p> <p>Pre-release and build commands allow specifying their value with <code>=</code>. This, however, is not possible for the version core bump commands.  To accomplish bigger version bumps, they can be chained together or replaced by a specific version.</p> Old Version Command New Version <code>0.1.0</code> <code>major=7,minor=27</code> ValueError <code>0.1.0</code> <code>7.27.6</code> <code>7.27.6</code> <code>0.1.0</code> <code>fix,fix,fix,fix</code> <code>0.1.4</code> <code>0.1.0</code> <code>major,major,minor</code> <code>2.1.0</code>"},{"location":"user_guide/1-commands/#pre-release","title":"Pre-Release","text":"<p>If applied on a version without pre-release identifiers, <code>prerelease</code>\u2014or its aliases <code>rc</code>, <code>pre</code>, <code>pre-release</code>\u2014will bump the patch version and introduce the default pre-release identifiers rc and 1. If some pre-release identifiers are already present and the last one is a number, it will be bumped. Naturally, this drops any present build identifiers.</p> Old Version Command New Version <code>0.9.5</code> <code>prerelease</code><code>rc</code><code>pre</code><code>pre-release</code> <code>0.9.6-rc.1</code> <code>0.9.5-rc.1</code> <code>pre</code> <code>0.9.5-rc.2</code> <code>0.9.5-rc.2+debug</code> <code>rc</code> <code>0.9.5-rc.3</code> <code>0.9.5+dev.3</code> <code>rc</code> <code>0.9.6-rc.1</code>"},{"location":"user_guide/1-commands/#chained-with-a-version-core-bump","title":"Chained With a Version Core Bump","text":"<p>You can chain multiple commands together.  If the version core is bumped before the pre-release bump, the pre-release bump will not bump the patch version.</p> Old Version Command New Version <code>0.8.6</code> <code>rc</code> <code>0.8.7-rc.1</code> <code>0.8.6</code> <code>patch,rc</code> <code>0.8.7-rc.1</code> <code>0.8.6</code> <code>minor,rc</code> <code>0.9.0-rc.1</code> <code>0.8.6</code> <code>major,rc</code> <code>1.0.0-rc.1</code> <code>0.8.6</code> <code>1.3.5,rc,rc</code> <code>1.3.5-rc.2</code> <code>0.8.6</code> <code>major,rc,build</code> <code>1.0.0-rc.1+build.1</code> <code>0.8.6</code> <code>major,build,rc</code> <code>1.0.0-rc.1</code>"},{"location":"user_guide/1-commands/#alphanumeric-pre-release-identifiers","title":"Alphanumeric Pre-Release Identifiers","text":"<p>If pre-release identifiers are present but the last one is an alphanumeric identifier\u2014i.e. not a number\u2014it will not be bumped and no further identifiers are introduced (current python-semver behavior<sup>issue</sup>).  This will normally result in a <code>ValidationError</code>, unless you have turned off validate-bump in your hatch version settings.</p> Old Version Command validate-bump New Version <code>0.9.7-rc1</code> <code>prerelease</code> True ValidationError <code>0.9.7-rc1</code> <code>prerelease</code> False <code>0.9.7-rc1</code>"},{"location":"user_guide/1-commands/#custom-identifiers","title":"Custom Identifiers","text":"<p>You can define your own pre-release identifier like this: <code>prerelease=&lt;identifier&gt;</code>:</p> Old Version Command New Version <code>0.3.3</code> <code>pre=alpha</code> <code>0.3.4-alpha.1</code> <code>0.3.4-alpha.1</code> <code>pre</code> <code>0.3.4-alpha.2</code> <code>0.3.4-alpha.2</code> <code>pre=beta</code> <code>0.3.4-alpha.3</code> <sup>bug</sup> <p>Unfortunately, once a pre-release identifier has been introduced, it cannot be changed later. This is a current python-semver bug. For now you can work around it by using a specific version command.  Bumping the version core will effectively  also drop the identifier, so then another identifier can be introduced again.</p>"},{"location":"user_guide/1-commands/#alpha-beta-shortcuts","title":"Alpha, Beta Shortcuts","text":"<p><code>alpha</code> and <code>beta</code> are very common pre-release identifiers. Hatch-semver provides the <code>alpha</code> and <code>beta</code> shortcuts for <code>prerelease=alpha</code> and <code>prerelease=beta</code>, respectively.</p> Old Version Command New Version <code>5.12.3</code> <code>alpha</code> <code>5.12.4-alpha.1</code> <code>5.12.3</code> <code>beta</code> <code>5.12.4-beta.1</code> <p><code>alpha</code> and <code>beta</code> themselves are not aliases of <code>prerelease</code>. You cannot use them to define a custom identifier. <code>rc</code>, however, is a true alias and allows this.</p> Old Version Command New Version <code>5.12.3</code> <code>alpha=ALPHA</code> ValueError <code>5.12.3</code> <code>rc=RC</code> <code>5.12.4-RC.1</code>"},{"location":"user_guide/1-commands/#release","title":"Release","text":"<p>The <code>release</code> command turns a pre-release version into a final release. If applied on a bare version core, it will result in a ValidationError because the resulting version is not higher than the old one. Bump validation can be turned off.</p> Old Version Command validate-bump New Version <code>1.0.0-rc4+build.23</code> <code>release</code> True <code>1.0.0</code> <code>1.0.0</code> <code>release</code> True ValidationError <code>1.0.0</code> <code>release</code> False <code>1.0.0</code> <p>You can meaningfully use release chained with another commands, although the alternatives are perhaps more intuitive:</p> Old Version Command New Version <code>7.1.8-rc.1</code> <code>release,beta</code> <code>7.1.9-beta.1</code> <code>7.1.8-rc.1</code> <code>patch,beta</code> <code>7.1.9-beta.1</code>"},{"location":"user_guide/1-commands/#build","title":"Build","text":"<p>The <code>build</code> command introduces the default build identifiers build and 1.  If some build identifiers are already present, and the last one is a number, it will be bumped.</p> <p>Similar to the pre-release command, you can specify you own custom build idetifier after <code>=</code>.  Same as with pre-releases, this is prone to a bug in python-semver.</p> Old Version Command New Version <code>4.8.5-rc.2</code> <code>build</code> <code>4.8.5-rc.2+build.1</code> <code>4.8.5-rc.2+build.1</code> <code>build</code> <code>4.8.5-rc.2+build.2</code> <code>1.0.0</code> <code>build=fix-docs</code> <code>1.0.0+fix-docs.1</code> <code>1.0.0+fix-docs.1</code> <code>build</code> <code>1.0.0+fix-docs.2</code> <code>1.0.0+fix-docs.2</code> <code>build=docs-fixed</code> <code>1.0.0+fix-docs.3</code> <sup>bug</sup> <p>Build versions are all of the same precedence, so technically, a version bump does not occur. Normally, bump-validation checks whether the resulting version is higher than the old one.  However, if all that changes is the build identifier, a version of equal precedence is sufficient to pass the validation. </p> Old Version Command validate-bump New Version <code>4.8.5-rc.2</code> <code>build=tracing</code> True <code>4.8.5-rc.2+tracing.1</code> <code>4.8.5-rc.2+tracing.2</code> <code>4.8.5-rc.2+debug</code> True <code>4.8.5-rc.2+debug</code>"},{"location":"user_guide/1-commands/#development-build-shortcut","title":"Development Build Shortcut","text":"<p>Sometimes people release what they call development builds, or dev builds. A convenient shortcut for <code>build=dev</code> is <code>dev</code>. Similar to the alpha and beta shortcuts, <code>dev</code> is not an alias, so don't try to specify a custom build identifier with it.</p> Old Version Command New Version <code>2.9.3</code> <code>build=dev</code> <code>2.9.3+dev.1</code> <code>2.9.3</code> <code>dev</code> <code>2.9.3+dev.1</code> <code>2.9.3</code> <code>dev=develop</code> ValueError"},{"location":"user_guide/1-commands/#alphanumeric-build-identifiers","title":"Alphanumeric Build Identifiers","text":"<p>Similar to python-semver's inability to bump alphanumeric pre-release identifiers, alphanumeric build identifiers will also not be bumped <sup>issue</sup>. The returned result is the exact same version. A ValidationError is not raised because when bumping or changing build identifiers, equal precedece of the old and new version is sufficient.</p> Old Version Command validate-bump New Version <code>6.3.4-rc.2+verbose</code> <code>build</code> True <code>6.3.4-rc.2+verbose</code>"},{"location":"user_guide/1-commands/#chained-commands","title":"Chained Commands","text":"<p>You can chain commands together by comma like this: <code>&lt;command1&gt;,&lt;command2&gt;,&lt;command3&gt;...</code>.  They are executed one by one in the specified sequence. Some straight-forward and most common examples of chained commands are presented in the pre-release section.</p> <p>The bump validation check is performed only after the last command is executed.  It is therefore OK to temporarily violate the version precedence rule for the intermediate versions as long as the last resulting version passes the validation against the old version.</p> Old Version Command validate-bump New Version <code>8.0.4</code> <code>major,8.0.5</code> True <code>8.0.5</code> <code>8.0.4</code> <code>8.0.3,patch,build</code> True <code>8.0.4+build.1</code> <code>8.0.4+build.1</code> <code>8.0.3,patch,build</code> True <code>8.0.4+build.1</code> <code>8.0.4-alpha.1</code> <code>8.0.4,alpha,pre</code> True <code>8.0.4-alpha.2</code>"},{"location":"user_guide/2-migrating-to-semver/","title":"Migrating From Hatch Standard Versioning Scheme","text":"<p>If you have used the hatch standard versioning scheme plugin before and now want to use this semver plugin instead, here is a short rundown of the similarities and differences between the two and their use.</p>"},{"location":"user_guide/2-migrating-to-semver/#identical-or-similar-behavior","title":"Identical or Similar Behavior","text":"Old version Command Standard Plugin Semver Plugin <code>1.0.0</code> <code>major</code> <code>2.0.0</code> <code>2.0.0</code> <code>1.0.0</code> <code>minor</code> <code>1.1.0</code> <code>1.1.0</code> <code>1.0.0</code> <code>micro</code><code>patch</code><code>fix</code> <code>1.0.1</code> <code>1.0.1</code> <code>1.0.0</code> <code>dev</code> <code>1.0.0.dev0</code> <code>1.0.0+dev.1</code>"},{"location":"user_guide/2-migrating-to-semver/#bumping-of-pre-releases","title":"Bumping of Pre-Releases","text":"<p>When bumping only the pre-release segment of a version which has not yet any pre-release segment, hatch-semver automatically bumps the patch version. It also automatically adds a purely numeric identifier 1 through which bumping becomes possible. Without a numeric identifier, this pre-release could not be bumped.</p> Old version Command Standard Plugin Semver Plugin Comment <code>1.0.0</code> <code>alpha</code> <code>1.0.0a0</code> <code>1.0.1-alpha.1</code> patch version auto-bumped <code>1.0.0</code> <code>beta</code> <code>1.1.0b0</code> <code>1.0.1-beta.1</code> patch version auto-bumped <code>1.0.0</code> <code>rc</code> <code>1.1.0rc0</code> <code>1.0.1-rc.1</code> patch version auto-bumped <p>The patch segment of the version core is not bumped, if pre-release is bumped in a chained command where a version core bump has occurred before. </p> Old version Command Standard Plugin Semver Plugin Comment <code>1.0.0</code> <code>patch,alpha</code> <code>1.0.1a0</code> <code>1.0.1-alpha.1</code> patch version not auto-bumped <code>1.0.0</code> <code>minor,beta</code> <code>1.1.0b0</code> <code>1.1.0-beta.1</code> patch version not auto-bumped <code>1.0.0</code> <code>major,rc</code> <code>2.0.0rc0</code> <code>2.0.0-rc.1</code> patch version not auto-bumped <p>See more examples in the commands documentation.</p>"},{"location":"user_guide/2-migrating-to-semver/#differences","title":"Differences","text":"<p>The <code>release</code> command of hatch-semver does not simply return the version core stripped off the pre-release and build idetifiers. It performs a real bump to the release version.  This normally goes along with a validation check.  When you try to release version which is not a prerelease, this will raise a ValidationError.</p> Old version Command validate-bump Standard Plugin Semver Plugin <code>1.0.0</code> <code>release</code> True <code>1.0.0</code> <code>ValidationError</code> <code>1.0.0</code> <code>release</code> False <code>1.0.0</code> <code>1.0.0</code> <code>1.0.0+dev.1</code> <code>release</code> True <code>1.0.0</code> <code>ValidationError</code> <code>1.0.0+dev.1</code> <code>release</code> False <code>1.0.0</code> <code>1.0.0</code>"},{"location":"user_guide/2-migrating-to-semver/#unsupported-commands","title":"Unsupported Commands","text":"<p>Hatch's standard's versioning scheme's <code>rev</code>, <code>r</code>, <code>post</code> commands are not supported.  There is no concept of a revision or a post-release in Semver.  However, with <code>build=post</code>, for instance you could add the build identifiers post and 1 which would be similar to a PEP 440 post-release. Like in PEP 440, also in Semver build identifiers have the same precedence.</p> <p>The abbreviations <code>a</code>, <code>b</code>, and <code>c</code> for <code>alpha</code>, <code>beta</code>, <code>rc</code>, and <code>preview</code>, respectively, are also not supported and will result in python-semver throwing a <code>ValueError</code> with ... is not a valid SemVer string. Hatch-semver actually uses <code>pre</code> as an alias for pre-release.</p> <p>Semver allows custom identifiers in prereleases, so if you really wanted an <code>a0</code> pre-release, you could achieve it by bumping to a specific version, i.e. <code>hatch version 1.2.3-a0</code> although such alphanumeric identifiers cannot be bumped by python-semver. Better go with <code>1.2.3-a.1</code> which could be bumped to <code>1.2.3-a.2</code>, <code>1.2.3-a.3</code> etc.</p>"}]}